# Copyright (c) 2021 by the Zeek Project. See LICENSE for details.
#
# This is pretty much a straightforward implementation following https://www.wireguard.com/protocol/

module Wireguard;

import spicy;

%byte-order = spicy::ByteOrder::Little;

type MessageType = enum {
	handshake_initiation = 1,
	handshake_response = 2,
	packet_cookie_reply = 3,
	packet_data = 4
};

function AEAD_LEN(num: uint64) : uint64 {
	return num + 16;
}

public type WireGuardPacket = unit {
	message_type: uint8;
	reserved_zero: bytes &size=3;
	switch ( MessageType(self.message_type) ) {
		MessageType::handshake_initiation -> handshake_initiation: HandshakeInitiation;
		MessageType::handshake_response -> handshake_response: HandshakeResponse;
		MessageType::packet_cookie_reply -> packet_cookie_reply: PacketCookieReply;
		MessageType::packet_data -> packet_data: PacketData;
	};
};

type HandshakeInitiation = unit {
	sender_index: uint32;
	unencrypted_ephemeral: bytes &size=32;
	encrypted_static: bytes &size=AEAD_LEN(32);
	encrypted_timestamp: bytes &size=AEAD_LEN(12);
	mac1: bytes &size=16;
	mac2: bytes &size=16;
	nothing: bytes &eod &requires=(|$$| == 0);
};

type HandshakeResponse = unit {
	sender_index: uint32;
	receiver_index: uint32;
	unencrypted_ephemeral: bytes &size=32;
	encrypted_nothing: bytes &size=AEAD_LEN(0);
	mac1: bytes &size=16;
	mac2: bytes &size=16;
	nothing: bytes &eod &requires=(|$$| == 0);
};

type PacketCookieReply = unit {
	receiver_index: uint32;
	nonce: bytes &size=24;
	encrypted_cookie: bytes &size=AEAD_LEN(16);
	nothing: bytes &eod &requires=(|$$| == 0);
};

type PacketData = unit {
	receiver_index: uint32;
	counter: uint64;
	encrypted_encapsulated_packet: bytes &eod;
};
