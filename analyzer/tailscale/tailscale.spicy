# Copyright (c) 2021 by the Zeek Project. See LICENSE for details.
#
module Tailscale;

import spicy;
import Wireguard;

%byte-order = spicy::ByteOrder::Big;

public type TailscalePacket = unit {
	magic: bytes &size=1 {
		local _magic = $$.to_uint(spicy::ByteOrder::Big);
		self.has_discovery = _magic == 0x54;
		self.has_wireguard = _magic == 0x01 || _magic == 0x02 || _magic == 0x03 || _magic == 0x04;

		if (self.has_wireguard) {
			self.data.connect(new Wireguard::WireGuardPacket);
			self.data.write(self.magic);
		}
    }

	var has_wireguard: bool;
	var has_discovery: bool;

	disc: DiscoveryPacket if (self.has_discovery);

	: bytes &eod &chunked if (self.has_wireguard) {
		self.data.write($$);
	}

	sink data;
};

type DiscoveryPacket = unit {
	# We already ate a byte, so we only need the next 5 bytes here.
	magic: bytes &size=5 &requires=($$ == b"\x53\xf0\x9f\x92\xac");
	senderDiscoPub: bytes &size=32;
	nonce: bytes &size=24;
	payload: bytes &eod;
} &byte-order = spicy::ByteOrder::Big;
